// vite.config.ts
import vue from "file:///home/infinity3dp/mainsail-src/node_modules/@vitejs/plugin-vue2/dist/index.mjs";
import version2 from "file:///home/infinity3dp/mainsail-src/node_modules/vite-plugin-package-version/dist/index.mjs";
import { defineConfig } from "file:///home/infinity3dp/mainsail-src/node_modules/vite/dist/node/index.js";
import Components from "file:///home/infinity3dp/mainsail-src/node_modules/unplugin-vue-components/dist/vite.mjs";
import { VuetifyResolver } from "file:///home/infinity3dp/mainsail-src/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import { checker } from "file:///home/infinity3dp/mainsail-src/node_modules/vite-plugin-checker/dist/esm/main.js";
import path3 from "path";

// src/plugins/build-version.ts
import fs from "fs";
import path from "path";

// package.json
var version = "2.14.0";

// src/plugins/build-version.ts
var __vite_injected_original_dirname = "/home/infinity3dp/mainsail-src/src/plugins";
function buildVersion() {
  return {
    name: "build-version",
    writeBundle: () => {
      setImmediate(async () => {
        const versionIdentifier = version.toString();
        const versionFile = await fs.promises.open(path.resolve(__vite_injected_original_dirname, "../../dist/.version"), "w");
        await versionFile.writeFile(`v${versionIdentifier}`);
        await versionFile.close();
      });
    }
  };
}

// src/plugins/build-release_info.ts
import fs2 from "fs";
import path2 from "path";
var __vite_injected_original_dirname2 = "/home/infinity3dp/mainsail-src/src/plugins";
function buildReleaseInfo() {
  return {
    name: "build-release_info",
    writeBundle: () => {
      setImmediate(async () => {
        const versionIdentifier = version.toString();
        const releaseInfoFile = await fs2.promises.open(
          path2.resolve(__vite_injected_original_dirname2, "../../dist/release_info.json"),
          "w"
        );
        await releaseInfoFile.writeFile(
          JSON.stringify({
            project_name: "mainsail",
            project_owner: "mainsail-crew",
            version: `v${versionIdentifier}`
          })
        );
        await releaseInfoFile.close();
      });
    }
  };
}

// vite.config.ts
import { VitePWA } from "file:///home/infinity3dp/mainsail-src/node_modules/vite-plugin-pwa/dist/index.js";
import postcssNesting from "file:///home/infinity3dp/mainsail-src/node_modules/postcss-nesting/dist/index.mjs";
import VueI18nPlugin from "file:///home/infinity3dp/mainsail-src/node_modules/@intlify/unplugin-vue-i18n/lib/vite.mjs";
var __vite_injected_original_dirname3 = "/home/infinity3dp/mainsail-src";
var PWAConfig = {
  registerType: "autoUpdate",
  includeAssets: ["fonts/**/*.woff2", "img/**/*.svg", "img/**/*.png"],
  manifest: {
    name: "INLONG 3D",
    short_name: "INLONG 3D",
    description: "INLONG 3D web app optimized for installation on Chrome/Edge.",
    scope: "/",
    start_url: "/",
    display: "standalone",
    id: "/?source=pwa",
    theme_color: "#D66C47",
    background_color: "#f5f5f5",
    icons: [
      {
        src: "/img/icons/icon-192-maskable.png",
        sizes: "192x192",
        type: "image/png"
      },
      {
        src: "/img/icons/icon-512-maskable.png",
        sizes: "512x512",
        type: "image/png"
      },
      {
        src: "/img/icons/icon-512-maskable.png",
        sizes: "512x512",
        type: "image/png",
        purpose: "any maskable"
      }
    ]
  },
  workbox: {
    globPatterns: ["**/*.{js,css,html,woff,woff2,png,svg}"],
    navigateFallbackDenylist: [/^\/(access|api|printer|server|websocket)/, /^\/webcam[2-4]?/],
    runtimeCaching: [
      {
        urlPattern: (options) => options.url.pathname.startsWith("/config.json"),
        handler: "StaleWhileRevalidate",
        options: {
          cacheName: "config.json"
        }
      }
    ],
    maximumFileSizeToCacheInBytes: 5 * 1024 * 1024
  },
  /* enable sw on development */
  devOptions: {
    enabled: true,
    type: "module",
    suppressWarnings: true
  }
};
var vite_config_default = defineConfig({
  plugins: [
    VitePWA(PWAConfig),
    buildVersion(),
    buildReleaseInfo(),
    vue(),
    version2(),
    checker({
      typescript: {
        root: path3.resolve(__vite_injected_original_dirname3),
        buildMode: false
      }
    }),
    Components({
      dts: true,
      // enabled by default if `typescript` is installed
      resolvers: [VuetifyResolver()]
    }),
    VueI18nPlugin({
      strictMessage: false,
      // allow HTML tags in translation
      escapeHtml: false
      // allow HTML tags in translation
    })
  ],
  css: {
    postcss: {
      plugins: [postcssNesting()]
    }
  },
  build: {
    target: "safari12",
    rollupOptions: {
      output: {
        manualChunks: (id) => {
          if (id.includes("node_modules")) {
            if (id.includes("/codemirror/") || id.includes("/@codemirror/")) {
              return "codemirror";
            }
            const chunkedLibs = ["vuetify", "echarts", "overlayscrollbars"];
            for (const lib of chunkedLibs) {
              if (id.includes(`/node_modules/${lib}/`)) {
                return lib.replace(".js", "");
              }
            }
          }
        }
      }
    },
    commonjsOptions: {
      transformMixedEsModules: true
    }
  },
  envPrefix: "VUE_",
  resolve: {
    alias: {
      "@": path3.resolve(__vite_injected_original_dirname3, "./src"),
      stream: "stream-browserify",
      events: "events"
    }
  },
  optimizeDeps: {
    include: ["events"],
    esbuildOptions: {
      define: {
        global: "globalThis"
      }
    }
  },
  server: {
    host: "0.0.0.0",
    port: 8080
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
